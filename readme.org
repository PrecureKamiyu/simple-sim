[[file:1.drawio.svg]]

* todo [0/2]

  - [ ] 上传：尽可能真实地模拟终端和服务器之间的通信。
    频分多址：通信方式
  - [ ] 迁移：迁移的代价，负载均衡，执行时间
  - [ ] 回传：结果回传，注意终端和边缘服务器之间的连接关系的改变
  - [ ] 云端：后续再加上也行

** TODO 服务器设计实例

  - 维护一个任务队列
  - 核数：例如 4 CPU = 4 个单核服务器，分别维护一个任务队列
  - 两层：存储空间和 CPU 循环数（算力）
  - 坐标、覆盖范围等

** TODO 上传和回传

上传：尽可能真实地模拟终端和服务器之间的通信。通信方式：频分多址。
回传：结果回传，注意终端和边缘服务器之间的连接关系的改变

* roadmap

** TODO 设置管理

在 utils 文件里面，需要读取本地设置文件
   - *Roadmap:*
     - Implement validation methods in =ConfigurationLoader= to check the validity of configuration parameters.
     - Add methods to save and load configurations from JSON or YAML files.

** TODO 任务管理

   - *Missing Sections:*
     - *Task Prioritization:* Implement a priority system for tasks.
     - *Task Error Handling:* Handle different types of task errors (e.g., timeouts, memory issues).

** TODO 设备管理

   - *Missing Sections:*
     - *Resource Management:* Manage device resources (e.g., CPU, memory) and ensure tasks do not exceed these limits.

** TODO 网络管理

   - *Missing Sections:*
     - *Network Topology:* Define and manage the network topology (e.g., mesh, star).
     - *Network Congestion Handling:* Handle network congestion and adjust task transfer delays accordingly.

** TODO offloading

     - *Offloading Strategies:* Develop and implement different offloading strategies based on device capabilities and task requirements.

** TODO 统计数据收集

I intend to just use in-disk file to store the statistics.

Implement methods in the =Device= class to track resource utilization.

*** 1. /Define Statistics Storage/

#+begin_src python
class Statistics:
    def __init__(self):
        self.device_utilization = {}
        self.task_delays = []

    def record_device_utilization(self, device_id, utilization):
        if device_id not in self.device_utilization:
            self.device_utilization[device_id] = []
        self.device_utilization[device_id].append(utilization)

    def record_task_delay(self, task_id, delay):
        self.task_delays.append((task_id, delay))

    def get_average_task_delay(self):
        if not self.task_delays:
            return 0
        total_delay = sum(delay for _, delay in self.task_delays)
        return total_delay / len(self.task_delays)

    def save_to_file(self, filename):
        with open(filename, 'w') as f:
            f.write(json.dumps({
                'device_utilization': self.device_utilization,
                'task_delays': self.task_delays
            }))

    @staticmethod
    def load_from_file(filename):
        with open(filename, 'r') as f:
            data = json.loads(f.read())
            stats = Statistics()
            stats.device_utilization = data['device_utilization']
            stats.task_delays = data['task_delays']
            return stats
#+end_src

*** 2. retrieve statistics

#+begin_src python
def analyze_simulation_results(filename):
    stats = Statistics.load_from_file(filename)
    print(f"Average Task Delay: {stats.get_average_task_delay()}")
    for device_id, utilizations in stats.device_utilization.items():
        print(f"Device {device_id} Utilization: {sum(utilizations) / len(utilizations)}")
#+end_src

* log


** [2024-11-27 Wed] Aider 真不好用，基本的一些 roadmap

进度其实倒退了，AI 真是难用。基本上时间都花在了给 AI 擦屁股上面。真是羞耻。在国内用 AI 也是折磨……麻烦……

基本框架上面是倒退了，但是更加模块化了。现在应当多计划一下就行。计划如下：

1. 完成对 device 任务执行的模拟
2. 完成对 task 上传、执行、传递、回传的过程的处理

** [2024-11-21 Thu] 基本框架实现了

其实设计就体现在图里面了。因为自己已经熟知了就不需要过多解释了。
